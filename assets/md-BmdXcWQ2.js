import{_ as l}from"./slidev/Link.vue_vue_type_script_setup_true_lang-DfI9EzQ6.js";import{o as m,c as p,k as t,e as i,aa as o,l as c,q as d,s as u,B as a}from"./modules/vue-DBgDjl02.js";import{I as g}from"./slidev/default-BoXR918h.js";import{u as f,f as b}from"./slidev/context-CP5hkPrc.js";import"./index-CzwDcVxB.js";import"./modules/shiki-CR29Tdxk.js";const v={__name:"logic-gates.md__slidev_481",setup(z){const{$slidev:_,$nav:$,$clicksContext:n,$clicks:x,$page:k,$renderContext:N,$frontmatter:r}=f();return n.setup(),(P,e)=>{const s=l;return m(),p(g,d(u(a(b)(a(r),480))),{default:t(()=>[e[3]||(e[3]=i("h2",null,"Logica combinata",-1)),e[4]||(e[4]=i("p",null,[o("Quando si collegano più porte insieme, si ha un sistema di logica combinata o "),i("em",null,"logica combinatoria"),o(". Per progettare un sistema di logica combinata, possiamo utilizzare tabelle di verità per abbinare le uscite logiche alle diverse condizioni di input. Le espressioni booleane vengono scritte dalle condizioni nella tabella. Successivamente, possiamo convertire direttamente l’espressione in un diagramma di porte logiche.")],-1)),i("p",null,[e[1]||(e[1]=o("Potresti ricordare che nel capitolo ")),c(s,{to:"/elements#xor"},{default:t(()=>e[0]||(e[0]=[o("Elementi booleani")])),_:1}),e[2]||(e[2]=o(" abbiamo visto che non c’era un operatore da utilizzare nel codice per XOR. Era stato creato utilizzando una combinazione degli operatori AND, OR e NOT:"))])]),_:1},16)}}},V=v;export{V as default};
