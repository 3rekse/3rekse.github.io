import{o as i,c as r,k as s,e as l,q as n,s as u,B as a}from"./modules/vue-C12uiUEh.js";import{I as d}from"./slidev/default-7TILS3OS.js";import{u as p,f as m}from"./slidev/context-CwiCxT4t.js";import"./index-2AyV7bxw.js";import"./modules/shiki-BBIst5IO.js";const B={__name:"virtualMachine.md__slidev_624",setup(c){const{$slidev:v,$nav:f,$clicksContext:t,$clicks:g,$page:b,$renderContext:z,$frontmatter:o}=p();return t.setup(),(_,e)=>(i(),r(d,n(u(a(m)(a(o),623))),{default:s(()=>e[0]||(e[0]=[l("p",null,"Nel lavoro su Disco, Rosenblum e colleghi hanno affrontato questo problema in modo abbastanza elegante sfruttando una modalità speciale fornita dall’hardware MIPS nota come modalità supervisore. Quando si esegue in questa modalità, non si ha ancora accesso alle istruzioni privilegiate, ma si può accedere a un po’ più di memoria rispetto alla modalità utente; il sistema operativo può usare questa memoria extra per le sue strutture dati e tutto funziona bene. Su hardware che non dispone di tale modalità, si deve eseguire il sistema operativo in modalità utente e utilizzare la protezione della memoria (tabelle delle pagine e TLB) per proteggere adeguatamente le strutture dati del sistema operativo. In altre parole, quando si passa al sistema operativo, il monitor dovrebbe rendere la memoria delle strutture dati del sistema operativo accessibile al sistema operativo tramite le protezioni delle tabelle delle pagine; quando si torna all’applicazione in esecuzione, la possibilità di leggere e scrivere il kernel dovrebbe essere rimossa.",-1)])),_:1},16))}};export{B as default};
