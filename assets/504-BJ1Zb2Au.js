import{o as s,c as n,k as e,q as c,s as r,A as l,e as o,a6 as t}from"./modules/vue-DflCt9hH.js";import{I as d}from"./slidev/two-cols-header-Dm9WaQ7t.js";import{i9 as a}from"./index-BXbHHbuc.js";import{p,u,f as m}from"./slidev/context-CgID4z_0.js";import"./modules/shiki-Din2pWPP.js";const _="/internet/images/logic-lab/DFF.png",f="/logica/3_1.png",g=o("h2",null,"Flip-Flop D DFF (Data flip-flop)",-1),h=o("p",null,"Un DFF è un tipo di flip-flop che ha un ingresso di dati (D) e un ingresso di clock (CLK). Quando il clock cambia stato (ad esempio, da basso ad alto), il valore all’ingresso D viene catturato e trattenuto fino al prossimo cambio di stato del clock.",-1),k=o("p",null,[t("Ecco un esempio di come potrebbe essere implementato un "),o("a",{href:"https://tinyurl.com/24zdtlap",target:"_blank"},"flip-flop D")],-1),v=o("p",null,[o("img",{src:_,alt:"dflipflop"})],-1),b=o("p",null,[t("In questo esempio, "),o("code",null,"d"),t(" è l’ingresso di dati, "),o("code",null,"clk"),t(" è l’ingresso di clock, "),o("code",null,"q"),t(" è l’uscita del flip-flop, e "),o("code",null,"notq"),t(' è l’uscita negata. Quando il clock cambia da basso ad alto (una "rising edge"), il valore di '),o("code",null,"d"),t(" viene catturato e inviato all’uscita "),o("code",null,"q"),t(", e il valore negato di "),o("code",null,"d"),t(" viene inviato all’uscita "),o("code",null,"notq"),t(".")],-1),F=o("p",null,[o("img",{src:f,alt:"dflipflop"})],-1),z={__name:"504",setup(D){return p(a),u(),(q,x)=>(s(),n(d,c(r(l(m)(l(a),503))),{left:e(i=>[v]),right:e(i=>[b,F]),default:e(()=>[g,h,k]),_:1},16))}};export{z as default};
