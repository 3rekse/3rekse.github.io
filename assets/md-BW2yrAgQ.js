import{o as a,c as l,k as n,e,q as s,s as p,B as o}from"./modules/vue-BZNZ8Dvd.js";import{_ as u}from"./slidev/cover.vue_vue_type_script_setup_true_lang-DLxQiza0.js";import{u as c,f as m}from"./slidev/context-Ct6ukhQG.js";import"./index-CEdfyKoQ.js";import"./modules/shiki-Vdy54MD1.js";const b={__name:"ilcomputer.md__slidev_280",setup(d){const{$slidev:f,$nav:h,$clicksContext:t,$clicks:_,$page:g,$renderContext:v,$frontmatter:r}=c();return t.setup(),(x,i)=>(a(),l(u,s(p(o(m)(o(r),279))),{default:n(()=>i[0]||(i[0]=[e("h4",null,"🧠 Omarillo 3",-1),e("h3",null,"⚙️ Il pipelining suddivide l’elaborazione di un’istruzione in più fasi sequenziali (🛠️ Fetch, 🔍 Decode, 🚀 Execute, ecc.), consentendo alla CPU di lavorare su diverse istruzioni contemporaneamente. Ad esempio:",-1),e("h3",null,"🕵️‍♂️ La fase Fetch acquisisce la prossima istruzione,",-1),e("h3",null,"⚡ Mentre la fase Execute elabora quella precedente.",-1),e("h3",null,"🎯 Scopo: Aumentare il throughput della CPU 🧠⚡, cioè il numero di istruzioni completate in un dato intervallo di tempo ⏱️.",-1),e("h3",null,"🖥️ Il multiprocessing sfrutta più core o CPU 💾💡 per eseguire più processi (o thread) in parallelo 🔄.",-1),e("h3",null,"✅ Ogni processo può eseguire istruzioni indipendenti.",-1),e("h3",null,"🤝 Oppure collaborare con altri processi per completare un’attività più ampia.",-1),e("h3",null,"🎯 Scopo: Migliorare la capacità del sistema 🌐 di eseguire più attività contemporaneamente, soprattutto per programmi CPU-bound 🧩🚦.",-1)])),_:1},16))}};export{b as default};
