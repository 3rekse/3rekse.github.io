import{b as i,o as s,w as n,g as e,v as p,x as l,B as a}from"./modules/vue-BXqLZby3.js";import{I as u}from"./slidev/default-Cm8BpnAS.js";import{u as c,f as m}from"./slidev/context-DBCxS-96.js";import"./index-BM_5OaPd.js";import"./modules/shiki-D1VZkxQz.js";const P={__name:"promises.md__slidev_1244",setup(d){const{$clicksContext:t,$frontmatter:r}=c();return t.setup(),(f,o)=>(s(),i(u,p(l(a(m)(a(r),1243))),{default:n(()=>o[0]||(o[0]=[e("h1",null,"Introduzione",-1),e("p",null,"Promesse JavaScript",-1),e("p",null,"Le promesse sono come un contratto, ma in JavaScript.",-1),e("p",null,"JavaScript è, di default, single threaded, quindi tutto il nostro codice viene eseguito in sequenza, una riga dopo l’altra.",-1),e("p",null,"Sfortunatamente, se una riga di codice, o una funzione per esempio, impiega troppo tempo per essere eseguita, la nostra applicazione si bloccherebbe, e si fermerebbe ad aspettare fino a quando quella riga ha completato la sua operazione.",-1),e("p",null,"Questo creerebbe un’esperienza utente orribile - immagina se la tua app si bloccasse completamente ogni volta che doveva recuperare dati o eseguire un calcolo complicato.",-1),e("p",null,"Entrano in gioco le Promesse. Le promesse sono un modo per gestire le operazioni asincrone in JavaScript.",-1),e("p",null,"Possiamo inserire codice che potrebbe impiegare molto tempo per essere eseguito in una Promessa, e poi essere notificati da JavaScript quando quella Promessa ha completato l’esecuzione (risolta).",-1)])),_:1,__:[0]},16))}};export{P as default};
