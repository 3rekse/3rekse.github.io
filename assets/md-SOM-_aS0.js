import{o as t,c as s,k as n,e,q as u,s as c,B as i}from"./modules/vue-DBgDjl02.js";import{_ as p}from"./slidev/intro-BZ2ver3Q.js";import{u as m,f as l}from"./slidev/context-DZprEWXy.js";import"./index-BYY5VoBz.js";import"./modules/shiki-CR29Tdxk.js";const d={__name:"virtualMachine.md__slidev_632",setup(f){const{$slidev:_,$nav:z,$clicksContext:r,$clicks:h,$page:v,$renderContext:b,$frontmatter:o}=m();return r.setup(),($,a)=>(t(),s(p,u(c(i(l)(i(o),631))),{default:n(()=>a[0]||(a[0]=[e("p",null,"Un semplice esempio di come un VMM deve interporsi su alcune operazioni sorge quando un processo in esecuzione su un dato sistema operativo cerca di fare una chiamata di sistema.",-1),e("p",null,"Ad esempio, il processo potrebbe cercare di chiamare open() su un file, o potrebbe chiamare read() per ottenere dati da esso, o potrebbe chiamare fork() per creare un nuovo processo.",-1),e("p",null,"In un sistema senza virtualizzazione, una chiamata di sistema viene eseguita con un’istruzione speciale; su MIPS, è un’istruzione di trap, e su x86, è l’istruzione int (un interrupt) con l’argomento 0x80.",-1),e("p",null,"Ecco la chiamata di libreria open su FreeBSD [B00] (ricorda che il tuo codice C prima fa una chiamata di libreria nella libreria C, che poi esegue la sequenza di assembly appropriata per effettivamente emettere l’istruzione di trap e fare una chiamata di sistema)",-1)])),_:1},16))}},M=d;export{M as default};
