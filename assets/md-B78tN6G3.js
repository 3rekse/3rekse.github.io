import{b as r,o as n,w as s,g as e,v as l,x as c,B as a}from"./modules/vue-BXqLZby3.js";import{_ as u}from"./slidev/cover.vue_vue_type_script_setup_true_lang-vcXHcYy4.js";import{u as m,f as p}from"./slidev/context-Co-6DO2t.js";import"./index-CDGWvc22.js";import"./modules/shiki-D1VZkxQz.js";const B={__name:"ilcomputer.md__slidev_301",setup(d){const{$clicksContext:t,$frontmatter:i}=m();return t.setup(),(_,o)=>(n(),r(u,l(c(a(p)(a(i),300))),{default:s(()=>o[0]||(o[0]=[e("h3",null,"🧑‍🎓 Studente-6",-1),e("h2",null,"Capisco. Ma come si fa a prevenire che due core lavorino sullo stesso compito e causino un conflitto?",-1),e("h3",null,"🧠 Omarillo-2",-1),e("h2",null,'Ottima domanda! Qui entra in gioco il meccanismo delle "mutex" (mutual exclusion) e delle "barriere". Immagina di avere delle chiavi per accessi esclusivi a determinate risorse. Solo un core alla volta può usare una chiave, garantendo che non ci siano conflitti. E le barriere? Pensale come punti di incontro dove tutti devono aspettare prima di procedere insieme. 🔐🚧',-1)])),_:1,__:[0]},16))}};export{B as default};
