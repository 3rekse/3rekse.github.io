import{o as i,c as s,k as n,e,q as p,s as l,B as a}from"./modules/vue-DBgDjl02.js";import{I as c}from"./slidev/default-D-PhrTF-.js";import{u,f as m}from"./slidev/context-DUtDxpjI.js";import"./index-BqoYv9XP.js";import"./modules/shiki-CR29Tdxk.js";const d={__name:"promises.md__slidev_997",setup(f){const{$slidev:g,$nav:v,$clicksContext:t,$clicks:_,$page:b,$renderContext:z,$frontmatter:r}=u();return t.setup(),(P,o)=>(i(),s(c,p(l(a(m)(a(r),996))),{default:n(()=>o[0]||(o[0]=[e("h1",null,"Introduzione",-1),e("p",null,"Promesse JavaScript",-1),e("p",null,"Le promesse sono come un contratto, ma in JavaScript.",-1),e("p",null,"JavaScript è, di default, single threaded, quindi tutto il nostro codice viene eseguito in sequenza, una riga dopo l’altra.",-1),e("p",null,"Sfortunatamente, se una riga di codice, o una funzione per esempio, impiega troppo tempo per essere eseguita, la nostra applicazione si bloccherebbe, e si fermerebbe ad aspettare fino a quando quella riga ha completato la sua operazione.",-1),e("p",null,"Questo creerebbe un’esperienza utente orribile - immagina se la tua app si bloccasse completamente ogni volta che doveva recuperare dati o eseguire un calcolo complicato.",-1),e("p",null,"Entrano in gioco le Promesse. Le promesse sono un modo per gestire le operazioni asincrone in JavaScript.",-1),e("p",null,"Possiamo inserire codice che potrebbe impiegare molto tempo per essere eseguito in una Promessa, e poi essere notificati da JavaScript quando quella Promessa ha completato l’esecuzione (risolta).",-1)])),_:1},16))}},k=d;export{k as default};
