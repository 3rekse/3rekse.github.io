import{o as i,c as n,k as t,q as c,s as r,A as l,e as o,a6 as e}from"./modules/vue-CzHRG3tJ.js";import{I as d}from"./slidev/two-cols-header-Bsb5_QQ0.js";import{_ as p,dE as a}from"./index-Bxv0B-Cu.js";import{p as u,u as _,f as m}from"./slidev/context-BRdP0yFI.js";import"./modules/shiki-C5i64R19.js";const f="/internet/images/logic-lab/DFF.png",g="/logica/3_1.png",h=o("h2",null,"Flip-Flop D DFF (Data flip-flop)",-1),v=o("p",null,"Un DFF è un tipo di flip-flop che ha un ingresso di dati (D) e un ingresso di clock (CLK). Quando il clock cambia stato (ad esempio, da basso ad alto), il valore all’ingresso D viene catturato e trattenuto fino al prossimo cambio di stato del clock.",-1),k=o("p",null,[e("Ecco un esempio di come potrebbe essere implementato un "),o("a",{href:"https://tinyurl.com/24zdtlap",target:"_blank",rel:"noopener"},"flip-flop D")],-1),b=o("p",null,[o("img",{src:f,alt:"dflipflop"})],-1),F=o("p",null,[e("In questo esempio, "),o("code",null,"d"),e(" è l’ingresso di dati, "),o("code",null,"clk"),e(" è l’ingresso di clock, "),o("code",null,"q"),e(" è l’uscita del flip-flop, e "),o("code",null,"notq"),e(' è l’uscita negata. Quando il clock cambia da basso ad alto (una "rising edge"), il valore di '),o("code",null,"d"),e(" viene catturato e inviato all’uscita "),o("code",null,"q"),e(", e il valore negato di "),o("code",null,"d"),e(" viene inviato all’uscita "),o("code",null,"notq"),e(".")],-1),D=o("p",null,[o("img",{src:g,alt:"dflipflop"})],-1),q={__name:"218",setup(x){return u(a),_(),(P,B)=>(i(),n(d,c(r(l(m)(l(a),217))),{left:t(s=>[b]),right:t(s=>[F,D]),default:t(()=>[h,v,k]),_:1},16))}},L=p(q,[["__file","/@slidev/slides/218.md"]]);export{L as default};
