import{b as r,o as p,w as e,g as o,C as t,v as d,x as u,B as a}from"./modules/vue-BXqLZby3.js";import{I as c}from"./slidev/two-cols-header-DW8JrJsc.js";import{u as m,f}from"./slidev/context-BgqA_Dhw.js";import"./index-CJl7H4dU.js";import"./modules/shiki-D1VZkxQz.js";const g="/rete/images/logic-lab/DFF.png",v="/logica/3_1.png",C={__name:"sequenziale.md__slidev_541",setup(b){const{$clicksContext:i,$frontmatter:s}=m();return i.setup(),(k,l)=>(p(),r(c,d(u(a(f)(a(s),540))),{left:e(n=>l[0]||(l[0]=[o("p",null,[o("img",{src:g,alt:"dflipflop"})],-1)])),right:e(n=>l[1]||(l[1]=[o("p",null,[t("In questo esempio, "),o("code",null,"d"),t(" è l’ingresso di dati, "),o("code",null,"clk"),t(" è l’ingresso di clock, "),o("code",null,"q"),t(" è l’uscita del flip-flop, e "),o("code",null,"notq"),t(' è l’uscita negata. Quando il clock cambia da basso ad alto (una "rising edge"), il valore di '),o("code",null,"d"),t(" viene catturato e inviato all’uscita "),o("code",null,"q"),t(", e il valore negato di "),o("code",null,"d"),t(" viene inviato all’uscita "),o("code",null,"notq"),t(".")],-1),o("p",null,[o("img",{src:v,alt:"dflipflop"})],-1)])),default:e(()=>[l[2]||(l[2]=o("h2",null,"Flip-Flop D DFF (Data flip-flop)",-1)),l[3]||(l[3]=o("p",null,"Un DFF è un tipo di flip-flop che ha un ingresso di dati (D) e un ingresso di clock (CLK). Quando il clock cambia stato (ad esempio, da basso ad alto), il valore all’ingresso D viene catturato e trattenuto fino al prossimo cambio di stato del clock.",-1)),l[4]||(l[4]=o("p",null,[t("Ecco un esempio di come potrebbe essere implementato un "),o("a",{href:"https://tinyurl.com/24zdtlap",target:"_blank"},"flip-flop D")],-1))]),_:1,__:[2,3,4]},16))}};export{C as default};
