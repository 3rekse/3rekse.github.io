import{o as n,c,k as t,q as r,s as d,B as l,e as o,aa as e}from"./modules/vue-9M24w38T.js";import{I as p}from"./slidev/two-cols-header-k9HlMh0S.js";import{u,f as _}from"./slidev/context-BrpKgFPm.js";import"./index-CErdVrjL.js";import"./modules/shiki-D165QSPi.js";const m="/internet/images/logic-lab/DFF.png",f="/logica/3_1.png",g=o("h2",null,"Flip-Flop D DFF (Data flip-flop)",-1),h=o("p",null,"Un DFF è un tipo di flip-flop che ha un ingresso di dati (D) e un ingresso di clock (CLK). Quando il clock cambia stato (ad esempio, da basso ad alto), il valore all’ingresso D viene catturato e trattenuto fino al prossimo cambio di stato del clock.",-1),k=o("p",null,[e("Ecco un esempio di come potrebbe essere implementato un "),o("a",{href:"https://tinyurl.com/24zdtlap",target:"_blank"},"flip-flop D")],-1),v=o("p",null,[o("img",{src:m,alt:"dflipflop"})],-1),b=o("p",null,[e("In questo esempio, "),o("code",null,"d"),e(" è l’ingresso di dati, "),o("code",null,"clk"),e(" è l’ingresso di clock, "),o("code",null,"q"),e(" è l’uscita del flip-flop, e "),o("code",null,"notq"),e(' è l’uscita negata. Quando il clock cambia da basso ad alto (una "rising edge"), il valore di '),o("code",null,"d"),e(" viene catturato e inviato all’uscita "),o("code",null,"q"),e(", e il valore negato di "),o("code",null,"d"),e(" viene inviato all’uscita "),o("code",null,"notq"),e(".")],-1),D=o("p",null,[o("img",{src:f,alt:"dflipflop"})],-1),F={__name:"sequenziale.md__slidev_504",setup($){const{$slidev:q,$nav:x,$clicksContext:a,$clicks:C,$page:P,$renderContext:B,$frontmatter:s}=u();return a.setup(),(z,I)=>(n(),c(p,r(d(l(_)(l(s),503))),{left:t(i=>[v]),right:t(i=>[b,D]),default:t(()=>[g,h,k]),_:1},16))}},V=F;export{V as default};
