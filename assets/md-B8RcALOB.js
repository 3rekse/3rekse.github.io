import{o as r,c as p,k as t,e as o,ac as e,q as d,s as u,B as a}from"./modules/vue-C12uiUEh.js";import{I as c}from"./slidev/two-cols-header-D9E-_haX.js";import{u as m,f}from"./slidev/context-CWGjG3BD.js";import"./index-C6xm2-Qk.js";import"./modules/shiki-BBIst5IO.js";const g="/internet/images/logic-lab/DFF.png",k="/logica/3_1.png",I={__name:"sequenziale.md__slidev_457",setup(v){const{$slidev:b,$nav:D,$clicksContext:i,$clicks:F,$page:_,$renderContext:q,$frontmatter:s}=m();return i.setup(),(x,l)=>(r(),p(c,d(u(a(f)(a(s),456))),{left:t(n=>l[0]||(l[0]=[o("p",null,[o("img",{src:g,alt:"dflipflop"})],-1)])),right:t(n=>l[1]||(l[1]=[o("p",null,[e("In questo esempio, "),o("code",null,"d"),e(" è l’ingresso di dati, "),o("code",null,"clk"),e(" è l’ingresso di clock, "),o("code",null,"q"),e(" è l’uscita del flip-flop, e "),o("code",null,"notq"),e(' è l’uscita negata. Quando il clock cambia da basso ad alto (una "rising edge"), il valore di '),o("code",null,"d"),e(" viene catturato e inviato all’uscita "),o("code",null,"q"),e(", e il valore negato di "),o("code",null,"d"),e(" viene inviato all’uscita "),o("code",null,"notq"),e(".")],-1),o("p",null,[o("img",{src:k,alt:"dflipflop"})],-1)])),default:t(()=>[l[2]||(l[2]=o("h2",null,"Flip-Flop D DFF (Data flip-flop)",-1)),l[3]||(l[3]=o("p",null,"Un DFF è un tipo di flip-flop che ha un ingresso di dati (D) e un ingresso di clock (CLK). Quando il clock cambia stato (ad esempio, da basso ad alto), il valore all’ingresso D viene catturato e trattenuto fino al prossimo cambio di stato del clock.",-1)),l[4]||(l[4]=o("p",null,[e("Ecco un esempio di come potrebbe essere implementato un "),o("a",{href:"https://tinyurl.com/24zdtlap",target:"_blank"},"flip-flop D")],-1))]),_:1},16))}};export{I as default};
