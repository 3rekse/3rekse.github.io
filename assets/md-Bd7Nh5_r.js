import{o as t,c as r,k as s,q as n,s as c,B as a,e}from"./modules/vue-9M24w38T.js";import{_ as u}from"./slidev/intro-cZQG49rJ.js";import{u as p,f as m}from"./slidev/context-B14DBQu9.js";import"./index-D5LvUICJ.js";import"./modules/shiki-D165QSPi.js";const l=e("p",null,"Un semplice esempio di come un VMM deve interporsi su alcune operazioni sorge quando un processo in esecuzione su un dato sistema operativo cerca di fare una chiamata di sistema.",-1),d=e("p",null,"Ad esempio, il processo potrebbe cercare di chiamare open() su un file, o potrebbe chiamare read() per ottenere dati da esso, o potrebbe chiamare fork() per creare un nuovo processo.",-1),_=e("p",null,"In un sistema senza virtualizzazione, una chiamata di sistema viene eseguita con un’istruzione speciale; su MIPS, è un’istruzione di trap, e su x86, è l’istruzione int (un interrupt) con l’argomento 0x80.",-1),f=e("p",null,"Ecco la chiamata di libreria open su FreeBSD [B00] (ricorda che il tuo codice C prima fa una chiamata di libreria nella libreria C, che poi esegue la sequenza di assembly appropriata per effettivamente emettere l’istruzione di trap e fare una chiamata di sistema)",-1),h={__name:"virtualMachine.md__slidev_620",setup(z){const{$slidev:v,$nav:b,$clicksContext:i,$clicks:$,$page:x,$renderContext:g,$frontmatter:o}=p();return i.setup(),(k,B)=>(t(),r(u,n(c(a(m)(a(o),619))),{default:s(()=>[l,d,_,f]),_:1},16))}},I=h;export{I as default};
